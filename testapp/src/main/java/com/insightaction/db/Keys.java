/**
 * This class is generated by jOOQ
 */
package com.insightaction.db;


import com.insightaction.db.tables.CsvImport;
import com.insightaction.db.tables.Product;
import com.insightaction.db.tables.ProductClassType;
import com.insightaction.db.tables.Store;
import com.insightaction.db.tables.StoreProductData;
import com.insightaction.db.tables.Vendor;
import com.insightaction.db.tables.records.CsvImportRecord;
import com.insightaction.db.tables.records.ProductClassTypeRecord;
import com.insightaction.db.tables.records.ProductRecord;
import com.insightaction.db.tables.records.StoreProductDataRecord;
import com.insightaction.db.tables.records.StoreRecord;
import com.insightaction.db.tables.records.VendorRecord;

import javax.annotation.Generated;

import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.UniqueKey;
import org.jooq.impl.AbstractKeys;


/**
 * A class modelling foreign key relationships between tables of the <code>insightaction</code> 
 * schema
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.6.1"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

	// -------------------------------------------------------------------------
	// IDENTITY definitions
	// -------------------------------------------------------------------------

	public static final Identity<CsvImportRecord, Integer> IDENTITY_CSV_IMPORT = Identities0.IDENTITY_CSV_IMPORT;
	public static final Identity<ProductRecord, Integer> IDENTITY_PRODUCT = Identities0.IDENTITY_PRODUCT;
	public static final Identity<ProductClassTypeRecord, Integer> IDENTITY_PRODUCT_CLASS_TYPE = Identities0.IDENTITY_PRODUCT_CLASS_TYPE;
	public static final Identity<StoreRecord, Integer> IDENTITY_STORE = Identities0.IDENTITY_STORE;
	public static final Identity<StoreProductDataRecord, Integer> IDENTITY_STORE_PRODUCT_DATA = Identities0.IDENTITY_STORE_PRODUCT_DATA;
	public static final Identity<VendorRecord, Integer> IDENTITY_VENDOR = Identities0.IDENTITY_VENDOR;

	// -------------------------------------------------------------------------
	// UNIQUE and PRIMARY KEY definitions
	// -------------------------------------------------------------------------

	public static final UniqueKey<CsvImportRecord> KEY_CSV_IMPORT_PRIMARY = UniqueKeys0.KEY_CSV_IMPORT_PRIMARY;
	public static final UniqueKey<ProductRecord> KEY_PRODUCT_PRIMARY = UniqueKeys0.KEY_PRODUCT_PRIMARY;
	public static final UniqueKey<ProductClassTypeRecord> KEY_PRODUCT_CLASS_TYPE_PRIMARY = UniqueKeys0.KEY_PRODUCT_CLASS_TYPE_PRIMARY;
	public static final UniqueKey<StoreRecord> KEY_STORE_PRIMARY = UniqueKeys0.KEY_STORE_PRIMARY;
	public static final UniqueKey<StoreProductDataRecord> KEY_STORE_PRODUCT_DATA_PRIMARY = UniqueKeys0.KEY_STORE_PRODUCT_DATA_PRIMARY;
	public static final UniqueKey<VendorRecord> KEY_VENDOR_PRIMARY = UniqueKeys0.KEY_VENDOR_PRIMARY;

	// -------------------------------------------------------------------------
	// FOREIGN KEY definitions
	// -------------------------------------------------------------------------

	public static final ForeignKey<ProductRecord, ProductClassTypeRecord> FK_PRODUCT_CLASS_TYPE = ForeignKeys0.FK_PRODUCT_CLASS_TYPE;
	public static final ForeignKey<ProductRecord, VendorRecord> FK_VENDOR = ForeignKeys0.FK_VENDOR;
	public static final ForeignKey<StoreProductDataRecord, StoreRecord> FK_STORE = ForeignKeys0.FK_STORE;
	public static final ForeignKey<StoreProductDataRecord, ProductRecord> FK_PRODUCT = ForeignKeys0.FK_PRODUCT;

	// -------------------------------------------------------------------------
	// [#1459] distribute members to avoid static initialisers > 64kb
	// -------------------------------------------------------------------------

	private static class Identities0 extends AbstractKeys {
		public static Identity<CsvImportRecord, Integer> IDENTITY_CSV_IMPORT = createIdentity(CsvImport.CSV_IMPORT, CsvImport.CSV_IMPORT.ID);
		public static Identity<ProductRecord, Integer> IDENTITY_PRODUCT = createIdentity(Product.PRODUCT, Product.PRODUCT.ID);
		public static Identity<ProductClassTypeRecord, Integer> IDENTITY_PRODUCT_CLASS_TYPE = createIdentity(ProductClassType.PRODUCT_CLASS_TYPE, ProductClassType.PRODUCT_CLASS_TYPE.ID);
		public static Identity<StoreRecord, Integer> IDENTITY_STORE = createIdentity(Store.STORE, Store.STORE.ID);
		public static Identity<StoreProductDataRecord, Integer> IDENTITY_STORE_PRODUCT_DATA = createIdentity(StoreProductData.STORE_PRODUCT_DATA, StoreProductData.STORE_PRODUCT_DATA.ID);
		public static Identity<VendorRecord, Integer> IDENTITY_VENDOR = createIdentity(Vendor.VENDOR, Vendor.VENDOR.ID);
	}

	private static class UniqueKeys0 extends AbstractKeys {
		public static final UniqueKey<CsvImportRecord> KEY_CSV_IMPORT_PRIMARY = createUniqueKey(CsvImport.CSV_IMPORT, CsvImport.CSV_IMPORT.ID);
		public static final UniqueKey<ProductRecord> KEY_PRODUCT_PRIMARY = createUniqueKey(Product.PRODUCT, Product.PRODUCT.ID);
		public static final UniqueKey<ProductClassTypeRecord> KEY_PRODUCT_CLASS_TYPE_PRIMARY = createUniqueKey(ProductClassType.PRODUCT_CLASS_TYPE, ProductClassType.PRODUCT_CLASS_TYPE.ID);
		public static final UniqueKey<StoreRecord> KEY_STORE_PRIMARY = createUniqueKey(Store.STORE, Store.STORE.ID);
		public static final UniqueKey<StoreProductDataRecord> KEY_STORE_PRODUCT_DATA_PRIMARY = createUniqueKey(StoreProductData.STORE_PRODUCT_DATA, StoreProductData.STORE_PRODUCT_DATA.ID);
		public static final UniqueKey<VendorRecord> KEY_VENDOR_PRIMARY = createUniqueKey(Vendor.VENDOR, Vendor.VENDOR.ID);
	}

	private static class ForeignKeys0 extends AbstractKeys {
		public static final ForeignKey<ProductRecord, ProductClassTypeRecord> FK_PRODUCT_CLASS_TYPE = createForeignKey(com.insightaction.db.Keys.KEY_PRODUCT_CLASS_TYPE_PRIMARY, Product.PRODUCT, Product.PRODUCT.PRODUCT_CLASS_TYPE_ID);
		public static final ForeignKey<ProductRecord, VendorRecord> FK_VENDOR = createForeignKey(com.insightaction.db.Keys.KEY_VENDOR_PRIMARY, Product.PRODUCT, Product.PRODUCT.VENDOR_ID);
		public static final ForeignKey<StoreProductDataRecord, StoreRecord> FK_STORE = createForeignKey(com.insightaction.db.Keys.KEY_STORE_PRIMARY, StoreProductData.STORE_PRODUCT_DATA, StoreProductData.STORE_PRODUCT_DATA.STORE_ID);
		public static final ForeignKey<StoreProductDataRecord, ProductRecord> FK_PRODUCT = createForeignKey(com.insightaction.db.Keys.KEY_PRODUCT_PRIMARY, StoreProductData.STORE_PRODUCT_DATA, StoreProductData.STORE_PRODUCT_DATA.PRODUCT_ID);
	}
}
