/**
 * This class is generated by jOOQ
 */
package com.insightaction.db.tables;


import com.insightaction.db.Insightaction;
import com.insightaction.db.Keys;
import com.insightaction.db.tables.records.StoreRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.6.1"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Store extends TableImpl<StoreRecord> {

	private static final long serialVersionUID = -2144365347;

	/**
	 * The reference instance of <code>insightaction.STORE</code>
	 */
	public static final Store STORE = new Store();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<StoreRecord> getRecordType() {
		return StoreRecord.class;
	}

	/**
	 * The column <code>insightaction.STORE.id</code>.
	 */
	public final TableField<StoreRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>insightaction.STORE.createDate</code>.
	 */
	public final TableField<StoreRecord, Timestamp> CREATEDATE = createField("createDate", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

	/**
	 * The column <code>insightaction.STORE.modifiedDate</code>.
	 */
	public final TableField<StoreRecord, Timestamp> MODIFIEDDATE = createField("modifiedDate", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

	/**
	 * The column <code>insightaction.STORE.storeLicenseeName</code>.
	 */
	public final TableField<StoreRecord, String> STORELICENSEENAME = createField("storeLicenseeName", org.jooq.impl.SQLDataType.VARCHAR.length(100).nullable(false), this, "");

	/**
	 * The column <code>insightaction.STORE.state</code>.
	 */
	public final TableField<StoreRecord, String> STATE = createField("state", org.jooq.impl.SQLDataType.VARCHAR.length(100).nullable(false), this, "");

	/**
	 * The column <code>insightaction.STORE.storeLicenseeInd</code>.
	 */
	public final TableField<StoreRecord, String> STORELICENSEEIND = createField("storeLicenseeInd", org.jooq.impl.SQLDataType.VARCHAR.length(100).nullable(false), this, "");

	/**
	 * The column <code>insightaction.STORE.zip</code>.
	 */
	public final TableField<StoreRecord, String> ZIP = createField("zip", org.jooq.impl.SQLDataType.VARCHAR.length(100).nullable(false), this, "");

	/**
	 * The column <code>insightaction.STORE.storeLicenseeNo</code>.
	 */
	public final TableField<StoreRecord, String> STORELICENSEENO = createField("storeLicenseeNo", org.jooq.impl.SQLDataType.VARCHAR.length(100).nullable(false), this, "");

	/**
	 * The column <code>insightaction.STORE.address1</code>.
	 */
	public final TableField<StoreRecord, String> ADDRESS1 = createField("address1", org.jooq.impl.SQLDataType.VARCHAR.length(100).nullable(false), this, "");

	/**
	 * The column <code>insightaction.STORE.city</code>.
	 */
	public final TableField<StoreRecord, String> CITY = createField("city", org.jooq.impl.SQLDataType.VARCHAR.length(100).nullable(false), this, "");

	/**
	 * Create a <code>insightaction.STORE</code> table reference
	 */
	public Store() {
		this("STORE", null);
	}

	/**
	 * Create an aliased <code>insightaction.STORE</code> table reference
	 */
	public Store(String alias) {
		this(alias, STORE);
	}

	private Store(String alias, Table<StoreRecord> aliased) {
		this(alias, aliased, null);
	}

	private Store(String alias, Table<StoreRecord> aliased, Field<?>[] parameters) {
		super(alias, Insightaction.INSIGHTACTION, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Identity<StoreRecord, Integer> getIdentity() {
		return Keys.IDENTITY_STORE;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<StoreRecord> getPrimaryKey() {
		return Keys.KEY_STORE_PRIMARY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<StoreRecord>> getKeys() {
		return Arrays.<UniqueKey<StoreRecord>>asList(Keys.KEY_STORE_PRIMARY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Store as(String alias) {
		return new Store(alias, this);
	}

	/**
	 * Rename this table
	 */
	public Store rename(String name) {
		return new Store(name, null);
	}
}
