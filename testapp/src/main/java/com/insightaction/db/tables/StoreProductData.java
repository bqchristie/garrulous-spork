/**
 * This class is generated by jOOQ
 */
package com.insightaction.db.tables;


import com.insightaction.db.Insightaction;
import com.insightaction.db.Keys;
import com.insightaction.db.tables.records.StoreProductDataRecord;

import java.math.BigDecimal;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.6.1"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class StoreProductData extends TableImpl<StoreProductDataRecord> {

	private static final long serialVersionUID = -2039606547;

	/**
	 * The reference instance of <code>insightaction.STORE_PRODUCT_DATA</code>
	 */
	public static final StoreProductData STORE_PRODUCT_DATA = new StoreProductData();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<StoreProductDataRecord> getRecordType() {
		return StoreProductDataRecord.class;
	}

	/**
	 * The column <code>insightaction.STORE_PRODUCT_DATA.id</code>.
	 */
	public final TableField<StoreProductDataRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>insightaction.STORE_PRODUCT_DATA.createDate</code>.
	 */
	public final TableField<StoreProductDataRecord, Timestamp> CREATEDATE = createField("createDate", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

	/**
	 * The column <code>insightaction.STORE_PRODUCT_DATA.modifiedDate</code>.
	 */
	public final TableField<StoreProductDataRecord, Timestamp> MODIFIEDDATE = createField("modifiedDate", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

	/**
	 * The column <code>insightaction.STORE_PRODUCT_DATA.Year</code>.
	 */
	public final TableField<StoreProductDataRecord, Integer> YEAR = createField("Year", org.jooq.impl.SQLDataType.INTEGER, this, "");

	/**
	 * The column <code>insightaction.STORE_PRODUCT_DATA.Period</code>.
	 */
	public final TableField<StoreProductDataRecord, Integer> PERIOD = createField("Period", org.jooq.impl.SQLDataType.INTEGER, this, "");

	/**
	 * The column <code>insightaction.STORE_PRODUCT_DATA.STORE_ID</code>.
	 */
	public final TableField<StoreProductDataRecord, Integer> STORE_ID = createField("STORE_ID", org.jooq.impl.SQLDataType.INTEGER, this, "");

	/**
	 * The column <code>insightaction.STORE_PRODUCT_DATA.PRODUCT_ID</code>.
	 */
	public final TableField<StoreProductDataRecord, Integer> PRODUCT_ID = createField("PRODUCT_ID", org.jooq.impl.SQLDataType.INTEGER, this, "");

	/**
	 * The column <code>insightaction.STORE_PRODUCT_DATA.Bottles</code>.
	 */
	public final TableField<StoreProductDataRecord, Integer> BOTTLES = createField("Bottles", org.jooq.impl.SQLDataType.INTEGER, this, "");

	/**
	 * The column <code>insightaction.STORE_PRODUCT_DATA.CasesActual</code>.
	 */
	public final TableField<StoreProductDataRecord, BigDecimal> CASESACTUAL = createField("CasesActual", org.jooq.impl.SQLDataType.DECIMAL.precision(8, 2), this, "");

	/**
	 * The column <code>insightaction.STORE_PRODUCT_DATA.CasesStandard</code>.
	 */
	public final TableField<StoreProductDataRecord, BigDecimal> CASESSTANDARD = createField("CasesStandard", org.jooq.impl.SQLDataType.DECIMAL.precision(8, 2), this, "");

	/**
	 * The column <code>insightaction.STORE_PRODUCT_DATA.Cases9Liter</code>.
	 */
	public final TableField<StoreProductDataRecord, BigDecimal> CASES9LITER = createField("Cases9Liter", org.jooq.impl.SQLDataType.DECIMAL.precision(8, 2), this, "");

	/**
	 * The column <code>insightaction.STORE_PRODUCT_DATA.RetailDollarVol</code>.
	 */
	public final TableField<StoreProductDataRecord, BigDecimal> RETAILDOLLARVOL = createField("RetailDollarVol", org.jooq.impl.SQLDataType.DECIMAL.precision(8, 2), this, "");

	/**
	 * The column <code>insightaction.STORE_PRODUCT_DATA.ShelfDollarVol</code>.
	 */
	public final TableField<StoreProductDataRecord, BigDecimal> SHELFDOLLARVOL = createField("ShelfDollarVol", org.jooq.impl.SQLDataType.DECIMAL.precision(8, 2), this, "");

	/**
	 * The column <code>insightaction.STORE_PRODUCT_DATA.FOBDollarVol</code>.
	 */
	public final TableField<StoreProductDataRecord, BigDecimal> FOBDOLLARVOL = createField("FOBDollarVol", org.jooq.impl.SQLDataType.DECIMAL.precision(8, 2), this, "");

	/**
	 * Create a <code>insightaction.STORE_PRODUCT_DATA</code> table reference
	 */
	public StoreProductData() {
		this("STORE_PRODUCT_DATA", null);
	}

	/**
	 * Create an aliased <code>insightaction.STORE_PRODUCT_DATA</code> table reference
	 */
	public StoreProductData(String alias) {
		this(alias, STORE_PRODUCT_DATA);
	}

	private StoreProductData(String alias, Table<StoreProductDataRecord> aliased) {
		this(alias, aliased, null);
	}

	private StoreProductData(String alias, Table<StoreProductDataRecord> aliased, Field<?>[] parameters) {
		super(alias, Insightaction.INSIGHTACTION, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Identity<StoreProductDataRecord, Integer> getIdentity() {
		return Keys.IDENTITY_STORE_PRODUCT_DATA;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<StoreProductDataRecord> getPrimaryKey() {
		return Keys.KEY_STORE_PRODUCT_DATA_PRIMARY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<StoreProductDataRecord>> getKeys() {
		return Arrays.<UniqueKey<StoreProductDataRecord>>asList(Keys.KEY_STORE_PRODUCT_DATA_PRIMARY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<ForeignKey<StoreProductDataRecord, ?>> getReferences() {
		return Arrays.<ForeignKey<StoreProductDataRecord, ?>>asList(Keys.FK_STORE, Keys.FK_PRODUCT);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public StoreProductData as(String alias) {
		return new StoreProductData(alias, this);
	}

	/**
	 * Rename this table
	 */
	public StoreProductData rename(String name) {
		return new StoreProductData(name, null);
	}
}
